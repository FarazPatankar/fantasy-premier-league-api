import * as v from "valibot";

const ElementStatsSchema = v.object({
  label: v.string(),
  name: v.string(),
});

enum ElementTypeShortName {
  GKP = "GKP",
  DEF = "DEF",
  MID = "MID",
  FWD = "FWD",
}

const ElementTypeSchema = v.object({
  id: v.number(),
  plural_name: v.string(),
  plural_name_short: v.enum(ElementTypeShortName),
  singular_name: v.string(),
  singular_name_short: v.enum(ElementTypeShortName),
  squad_select: v.number(),
  squad_min_select: v.nullable(v.number()),
  squad_max_select: v.nullable(v.number()),
  squad_min_play: v.number(),
  squad_max_play: v.number(),
  ui_shirt_specific: v.boolean(),
  sub_positions_locked: v.array(v.number()),
  element_count: v.number(),
});

const ElementSchema = v.object({
  chance_of_playing_next_round: v.nullable(v.number()),
  chance_of_playing_this_round: v.nullable(v.number()),
  code: v.number(),
  cost_change_event: v.number(),
  cost_change_event_fall: v.number(),
  cost_change_start: v.number(),
  cost_change_start_fall: v.number(),
  dreamteam_count: v.number(),
  element_type: v.number(),
  ep_next: v.string(),
  ep_this: v.nullable(v.string()),
  event_points: v.number(),
  first_name: v.string(),
  form: v.string(),
  id: v.number(),
  in_dreamteam: v.boolean(),
  news: v.string(),
  news_added: v.nullable(v.string()),
  now_cost: v.number(),
  photo: v.string(),
  points_per_game: v.string(),
  second_name: v.string(),
  selected_by_percent: v.string(),
  special: v.boolean(),
  squad_number: v.nullable(v.number()),
  status: v.string(),
  team: v.number(),
  team_code: v.number(),
  total_points: v.number(),
  transfers_in: v.number(),
  transfers_in_event: v.number(),
  transfers_out: v.number(),
  transfers_out_event: v.number(),
  value_form: v.string(),
  value_season: v.string(),
  web_name: v.string(),
  minutes: v.number(),
  goals_scored: v.number(),
  assists: v.number(),
  clean_sheets: v.number(),
  goals_conceded: v.number(),
  own_goals: v.number(),
  penalties_saved: v.number(),
  penalties_missed: v.number(),
  yellow_cards: v.number(),
  red_cards: v.number(),
  saves: v.number(),
  bonus: v.number(),
  bps: v.number(),
  influence: v.string(),
  creativity: v.string(),
  threat: v.string(),
  ict_index: v.string(),
  starts: v.number(),
  expected_goals: v.string(),
  expected_assists: v.string(),
  expected_goal_involvements: v.string(),
  expected_goals_conceded: v.string(),
  influence_rank: v.number(),
  influence_rank_type: v.number(),
  creativity_rank: v.number(),
  creativity_rank_type: v.number(),
  threat_rank: v.number(),
  threat_rank_type: v.number(),
  ict_index_rank: v.number(),
  ict_index_rank_type: v.number(),
  corners_and_indirect_freekicks_order: v.nullable(v.number()),
  corners_and_indirect_freekicks_text: v.string(),
  direct_freekicks_order: v.nullable(v.number()),
  direct_freekicks_text: v.string(),
  penalties_order: v.nullable(v.number()),
  penalties_text: v.string(),
  expected_goals_per_90: v.number(),
  saves_per_90: v.number(),
  expected_assists_per_90: v.number(),
  expected_goal_involvements_per_90: v.number(),
  expected_goals_conceded_per_90: v.number(),
  goals_conceded_per_90: v.number(),
  now_cost_rank: v.number(),
  now_cost_rank_type: v.number(),
  form_rank: v.number(),
  form_rank_type: v.number(),
  points_per_game_rank: v.number(),
  points_per_game_rank_type: v.number(),
  selected_rank: v.number(),
  selected_rank_type: v.number(),
  starts_per_90: v.number(),
  clean_sheets_per_90: v.number(),
});

const ChipPlaySchema = v.object({
  chip_name: v.string(),
  num_played: v.number(),
});

const TopElementInfoSchema = v.object({
  id: v.number(),
  points: v.number(),
});

const EventSchema = v.object({
  id: v.number(),
  name: v.string(),
  deadline_time: v.string(),
  deadline_time_epoch: v.number(),
  deadline_time_game_offset: v.number(),
  finished: v.boolean(),
  data_checked: v.boolean(),
  highest_scoring_entry: v.nullable(v.number()),
  average_entry_score: v.number(),
  highest_score: v.nullable(v.number()),
  is_previous: v.boolean(),
  is_current: v.boolean(),
  is_next: v.boolean(),
  cup_leagues_created: v.boolean(),
  h2h_ko_matches_created: v.boolean(),
  ranked_count: v.number(),
  chip_plays: v.array(ChipPlaySchema),
  most_selected: v.nullable(v.number()),
  most_transferred_in: v.nullable(v.number()),
  top_element: v.nullable(v.number()),
  top_element_info: v.nullable(TopElementInfoSchema),
  transfers_made: v.number(),
  most_captained: v.nullable(v.number()),
  most_vice_captained: v.nullable(v.number()),
});

const GameSettingsSchema = v.object({
  league_join_private_max: v.number(),
  league_join_public_max: v.number(),
  league_max_size_public_classic: v.number(),
  league_max_size_public_h2h: v.number(),
  league_max_size_private_h2h: v.number(),
  league_max_ko_rounds_private_h2h: v.number(),
  league_prefix_public: v.string(),
  league_points_h2h_win: v.number(),
  league_points_h2h_lose: v.number(),
  league_points_h2h_draw: v.number(),
  league_ko_first_instead_of_random: v.boolean(),
  cup_start_event_id: v.nullable(v.number()),
  cup_stop_event_id: v.nullable(v.number()),
  cup_qualifying_method: v.nullable(v.number()),
  cup_type: v.nullable(v.number()),
  featured_entries: v.array(v.number()),
  percentile_ranks: v.array(v.number()),
  squad_squadplay: v.number(),
  squad_squadsize: v.number(),
  squad_team_limit: v.number(),
  squad_total_spend: v.number(),
  ui_currency_multiplier: v.number(),
  ui_use_special_shirts: v.boolean(),
  ui_special_shirt_exclusions: v.array(v.number()),
  stats_form_days: v.number(),
  sys_vice_captain_enabled: v.boolean(),
  transfers_cap: v.number(),
  transfers_sell_on_fee: v.number(),
  max_extra_free_transfers: v.number(),
  league_h2h_tiebreak_stats: v.array(v.string()),
  timezone: v.string(),
});

const PhaseSchema = v.object({
  id: v.number(),
  name: v.string(),
  start_event: v.number(),
  stop_event: v.number(),
  highest_score: v.nullable(v.number()),
});

const TeamSchema = v.object({
  code: v.number(),
  draw: v.number(),
  form: v.nullable(v.string()),
  id: v.number(),
  loss: v.number(),
  name: v.string(),
  played: v.number(),
  points: v.number(),
  position: v.number(),
  short_name: v.string(),
  strength: v.number(),
  team_division: v.nullable(v.string()),
  unavailable: v.boolean(),
  win: v.number(),
  strength_overall_home: v.number(),
  strength_overall_away: v.number(),
  strength_attack_home: v.number(),
  strength_attack_away: v.number(),
  strength_defence_home: v.number(),
  strength_defence_away: v.number(),
  pulse_id: v.number(),
});

export const BootstrapStaticSchema = v.object({
  element_stats: v.array(ElementStatsSchema),
  element_types: v.array(ElementTypeSchema),
  elements: v.array(ElementSchema),
  events: v.array(EventSchema),
  game_settings: GameSettingsSchema,
  phases: v.array(PhaseSchema),
  teams: v.array(TeamSchema),
});

export type BootstrapStatic = v.InferOutput<typeof BootstrapStaticSchema>;
